// === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const UPDATE_CONFIG = {
    jsonUrl: 'https://predictech.5d4.ru/train_model/?house_id=2',
    startDelay: 5500, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (5.5 —Å–µ–∫)
    checkInterval: 2000,
    maxAttempts: 30
};

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let checkTimer = null;
let attempts = 0;
let modelShown = false;

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
document.addEventListener('DOMContentLoaded', () => {
    loadStoredData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    setTimeout(() => {
        saveOriginalButtonTexts();
        initUpdateButtons();
    }, 300);
});

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ ===
function initUpdateButtons() {
    const buttons = document.querySelectorAll('.btn-update');
    if (!buttons.length) {
        return setTimeout(initUpdateButtons, 500);
    }
    buttons.forEach(btn => {
        btn.addEventListener('click', handleClick);
    });
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ ===
function handleClick(e) {
    const btn = e.currentTarget;
    btn.disabled = true;
    btn.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞...';
    modelShown = false;

    console.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${UPDATE_CONFIG.startDelay / 1000} —Å–µ–∫—É–Ω–¥`);

    setTimeout(() => {
        btn.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
        startCheck();
    }, UPDATE_CONFIG.startDelay);
}

// === –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
function startCheck() {
    attempts = 0;
    clearInterval(checkTimer);
    checkStatus(); // –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É
    checkTimer = setInterval(checkStatus, UPDATE_CONFIG.checkInterval);
}

// === –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É ===
async function checkStatus() {
    attempts++;
    try {
        const response = await fetch(`${UPDATE_CONFIG.jsonUrl}&t=${Date.now()}`, {
            headers: { 'Accept': 'application/json' },
            cache: 'no-store'
        });

        if (!response.ok) throw new Error(`HTTP ${response.status}`);

        const dataText = await response.text();
        const data = fastParseJSON(dataText);

        if (data.status === "Success" && !modelShown) {
            modelShown = true;
            clearInterval(checkTimer);
            updatePageData(data);
            saveDataToLocal(data); // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
            showSuccessModal(data);
            resetButtons();
        } else if (data.status === "Error") {
            clearInterval(checkTimer);
            showErrorModal(data);
            resetButtons();
        } else if (attempts >= UPDATE_CONFIG.maxAttempts) {
            clearInterval(checkTimer);
            showTimeoutModal();
            resetButtons();
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
        clearInterval(checkTimer);
        showErrorModal({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö' });
        resetButtons();
    }
}

// === –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON ===
function fastParseJSON(text) {
    try {
        return JSON.parse(text);
    } catch {
        const start = text.indexOf('{');
        const end = text.lastIndexOf('}');
        if (start !== -1 && end !== -1) {
            return JSON.parse(text.slice(start, end + 1));
        }
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç');
    }
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM ===
function updatePageData(data) {
    const dateEls = document.querySelectorAll('.last-training-date');
    const accEls = document.querySelectorAll('.model-accuracy-value');
    const impEls = document.querySelectorAll('.accuracy-improvement-value');

    if (data.retrain_date) {
        const formatted = formatDate(data.retrain_date);
        dateEls.forEach(el => (el.textContent = formatted));
    }
    if (data.test_accuracy !== undefined) {
        const percent = (data.test_accuracy * 100).toFixed(1) + '%';
        accEls.forEach(el => (el.textContent = percent));
    }
    if (data.test_loss !== undefined) {
        const value = formatImprovementValue(data.test_loss);
        impEls.forEach(el => (el.textContent = value));
    }

    console.log('–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:', data);
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage ===
function saveDataToLocal(data) {
    const stored = {
        retrain_date: data.retrain_date || null,
        test_accuracy: data.test_accuracy || null,
        test_loss: data.test_loss || null
    };
    localStorage.setItem('modelData', JSON.stringify(stored));
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
}

function loadStoredData() {
    const stored = localStorage.getItem('modelData');
    if (!stored) return;

    try {
        const data = JSON.parse(stored);
        updatePageData(data);
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', err);
    }
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
function formatDate(str) {
    try {
        return `${str.substring(6, 8)}.${str.substring(4, 6)}.${str.substring(0, 4)}, ${str.substring(9, 11)}:${str.substring(11, 13)}`;
    } catch {
        return str;
    }
}

function formatImprovementValue(v) {
    const num = Math.abs(v).toFixed(2);
    return `${v >= 0 ? '+' : '-'}${num}%`;
}

// === –ú–æ–¥–∞–ª–∫–∏ ===
function showSuccessModal(data) {
    createModal('success', decodeUnicode(data.message || '–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!'));
}
function showErrorModal(data) {
    createModal('error', data.message || '–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è');
}
function showTimeoutModal() {
    createModal('error', '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
}

function createModal(type, message) {
    document.querySelectorAll('.update-model').forEach(m => m.remove());

    const isSuccess = type === 'success';
    const icon = isSuccess ? '/static/img/icon/check-4.svg' : '/static/img/icon/error.svg';
    const html = `
        <div class="update-model">
            <div class="container-update-model">
                <div class="update-model__content">
                    <div class="close-update-model"><img src="/static/img/icon/close-line.svg" alt="–ó–∞–∫—Ä—ã—Ç—å"></div>
                    <div class="circle-update ${isSuccess ? '' : 'error'}"><img src="${icon}" alt=""></div>
                    <div class="update-model__title">${message}</div>
                </div>
            </div>
        </div>`;
    document.body.insertAdjacentHTML('beforeend', html);

    const modal = document.querySelector('.update-model:last-child');
    initModalEvents(modal);
    removeModalConfirmActive();
}

function decodeUnicode(str) {
    return str.replace(/\\u[\dA-F]{4}/gi, m => String.fromCharCode(parseInt(m.replace(/\\u/g, ''), 16)));
}

function resetButtons() {
    document.querySelectorAll('.btn-update').forEach(btn => {
        btn.disabled = false;
        btn.textContent = btn.dataset.originalText || '–û–±–Ω–æ–≤–∏—Ç—å';
    });
}

function saveOriginalButtonTexts() {
    document.querySelectorAll('.btn-update').forEach(btn => {
        if (!btn.dataset.originalText) btn.dataset.originalText = btn.textContent;
    });
}

function removeModalConfirmActive() {
    const m = document.querySelector('.modal-confirm.modal-confirm-open.modal-confirm--active');
    if (m) m.classList.remove('modal-confirm--active');
}

function initModalEvents(modal) {
    modal.querySelector('.close-update-model').addEventListener('click', () => modal.remove());
    modal.addEventListener('click', e => { if (e.target === modal) modal.remove(); });
    document.addEventListener('keydown', function escClose(e) {
        if (e.key === 'Escape') {
            modal.remove();
            document.removeEventListener('keydown', escClose);
        }
    });
}

// === –≠–∫—Å–ø–æ—Ä—Ç ===
window.UpdateManager = {
    checkStatus,
    updatePageData,
    showSuccessModal,
    showErrorModal,
    resetButtons
};
